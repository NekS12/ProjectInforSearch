import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from dotenv import load_dotenv
from database import init_db, add_search
from parser_dns import search_dns
from parser_ozon import search_ozon
from parser_wb import search_wb
from parser_yandex import search_yandex
from bs4 import BeautifulSoup
import requests
import aiohttp
from io import BytesIO
from urllib.parse import urljoin
import re


load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

user_choices = {}

platforms = {
    "DNS": search_dns,
    "Ozon": search_ozon,
    "Wildberries": search_wb,
    "Yandex Market": search_yandex
}


def platform_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –í—Å–µ –ø–ª–æ—â–∞–¥–∫–∏(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data="all")],
        [InlineKeyboardButton(text="üí¨ DNS(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data="DNS")],
        [InlineKeyboardButton(text="üí¨ Ozon(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data="Ozon")],
        [InlineKeyboardButton(text="üí¨ Wildberries", callback_data="Wildberries")],
        [InlineKeyboardButton(text="üí¨ Yandex Market(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data="Yandex Market")],
        [InlineKeyboardButton(text="üåê –°–≤–æ—è —Å—Å—ã–ª–∫–∞", callback_data="custom_link")]
    ])
    return kb


def back_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]
    ])
    return kb

#------------------------------------------------------
def clean_text(text):
    # –£–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö: [–ø—Ä–∞–≤–∏—Ç—å], [1], [2] –∏ —Ç.–ø.
    text = re.sub(r'\[[^\]]*\]', '', text)

    # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    service_phrases = [
        "–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É",
        "–ø—Ä–∞–≤–∏—Ç—å", "–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏ ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ–π —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏",
        "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –æ–ø—ã—Ç–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"
    ]
    for phrase in service_phrases:
        text = text.replace(phrase, "")

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r'\n\s*\n', '\n', text)

    # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –±—É–∫–≤—ã (H G –Ø O) –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    text = re.sub(r'\b[HGO–Ø]\b', '', text)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r' +', ' ', text)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
    text = re.sub(r'^\s+', '', text, flags=re.MULTILINE)

    # –£–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫
    text = re.sub(r'\n{2,}', '\n\n', text)

    return text.strip()


def parse_custom_link(url):
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code != 200:
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        title = soup.title.string.strip() if soup.title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        img_tags = soup.find_all("img")
        images = []
        for img in img_tags:
            src = img.get("src")
            if src:
                full_url = urljoin(url, src)
                images.append(full_url)

        description = soup.body.get_text(strip=True) if soup.body else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"

        return title, images, description
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Å—ã–ª–∫–∏: {e}")
        return None


async def download_image(url: str) -> BytesIO | None:
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(url) as resp:
                if resp.status == 200 and resp.content_type.startswith('image'):
                    img_data = await resp.read()
                    return BytesIO(img_data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=platform_keyboard()
    )


@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    await callback.message.delete()

    if callback.data == "new_search":
        await callback.message.answer(
            "üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=platform_keyboard()
        )
    else:
        user_choices[callback.from_user.id] = callback.data
        if callback.data == "custom_link":
            await callback.message.answer("üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞:")
        else:
            await callback.message.answer("üí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@dp.message()
async def search(message: Message):
    user_id = message.from_user.id
    platform = user_choices.get(user_id)

    if not platform:
        await message.answer("üí¨ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É —á–µ—Ä–µ–∑ /start.")
        return

    query = message.text
    await message.answer("‚è≥ –ò—â—É —Ç–æ–≤–∞—Ä...")

    if platform == "custom_link":
        result = parse_custom_link(query)
        if result:
            title, images, description = result
            text = f"üõí {title}\n\n{description[:4000]}"  # –ë–µ–∑ —Å—Å—ã–ª–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            cleaned_text = clean_text(text)
            await message.answer(cleaned_text)

            # –ü–æ—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if images:
                for image_url in images[:5]:  # –º–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ä—Ç–∏–Ω–æ–∫
                    image_file = await download_image(image_url)
                    if image_file:
                        image_file.seek(0)
                        await message.answer_photo(
                            photo=BufferedInputFile(image_file.read(), filename="site_image.jpg")
                        )

                    await asyncio.sleep(0.2)
            else:
                await message.answer("üìÑ –ù–∞ —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        else:
            await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Å–∞–π—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.", reply_markup=back_keyboard())

        await message.answer("üîç –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?", reply_markup=back_keyboard())
        return

    all_results = []

    if platform == "all":
        for func in platforms.values():
            try:
                data = func(query)
                if data:
                    all_results.extend(data)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    else:
        try:
            func = platforms.get(platform)
            if func:
                data = func(query)
                if data:
                    all_results.extend(data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    if all_results:
        all_results.sort(key=lambda x: x[1])

        await message.answer(f"üõí –ù–∞–π–¥–µ–Ω–æ {len(all_results)} —Ç–æ–≤–∞—Ä–æ–≤!\nüî• –í—ã–≤–æ–∂—É –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ü–µ–Ω–µ:")

        for idx, product in enumerate(all_results, start=1):
            if len(product) == 6:
                name, price, rating, link, source, image = product
            else:
                name, price, link, source, image = product
                rating = 0  # –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–ª —Ä–µ–π—Ç–∏–Ω–≥

            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É", url=link)]]
            )

            rating_text = f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}" if rating else "‚≠ê –û—Ü–µ–Ω–∫–∞: –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
            text = (
                f"{idx}. üõí {name}\n"
                f"üî• –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                f"{rating_text}\n"
                f"üí¨ –ü–ª–æ—â–∞–¥–∫–∞: {source}"
            )

            if image:
                image_file = await download_image(image)
                if image_file:
                    image_file.seek(0)
                    await message.answer_photo(
                        photo=BufferedInputFile(image_file.read(), filename="site_image.jpg"),
                        caption=text,
                        reply_markup=kb
                    )
                else:
                    cleaned_text = clean_text(text)
                    await message.answer(cleaned_text, reply_markup=kb)
            else:
                cleaned_text = clean_text(text)
                await message.answer(cleaned_text, reply_markup=kb)

            await asyncio.sleep(0.3)
        # üí§ –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

        add_search(query, all_results[0][0], all_results[0][1])
        await message.answer("üîç –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?", reply_markup=back_keyboard())
    else:
        await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.", reply_markup=back_keyboard())


async def main():
    init_db()
    await dp.start_polling(bot, polling_timeout=60)


if __name__ == "__main__":
    asyncio.run(main())
